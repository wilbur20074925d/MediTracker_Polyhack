

const { resolve } = require('path')

const baseDir = process.cwd()
const jsonPaths = process.argv.slice(2)

// Deeply combines objects, overwriting primitive data, but recursively
// checking nested objects for unique keys. For example:
//   {a: 1, b: {c: 2}} + {a: 3, b: {x: 5}} -> {a: 3, b: {c: 2, x: 5}}
const spliceObjects = (a, b) => {
  return Object.keys(b).reduce((spliced, key) => {
    if (typeof a[key] === 'object' && typeof b[key] === 'object') {
      spliced[key] = spliceObjects(a[key], b[key])
    } else {
      spliced[key] = b[key]
    }
    return spliced
  }, Object.assign({}, a))
}

// Splice the JSON files specified then sent to stdout as JSON string
process.stdout.write(JSON.stringify(jsonPaths
  .map(relPath => resolve(baseDir, relPath))
  .map(absPath => require(absPath))
  .reduce((spliced, jsonObj) => spliceObjects(spliced, jsonObj), {})))
